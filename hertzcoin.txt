hertzcoin https://bitcointalk.org/index.php?topic=736313.0

heritage:

problems:
* MINOR: genesis seed is not a news event
* CRITICAL: Code that ensures that a PoW block hash matches the target difficulty is surepticiously renamed and changed to a NO-OP.
** Any valid X13 hash is a valid block. Anyone can mint PoW blocks at will
* MODERATE: Block timestamps are not checked for time drift

notes:

watermarks: uint64, INFINITE_LOOP
static const double TAX_PERCENTAGE = 0.00; //no tax


     // Check proof of work matches claimed amount
-    if (fCheckPOW && IsProofOfWork() && !CheckProofOfWork(GetHash(), nBits))
+    if (fCheckPOW && IsProofOfWork() && !CheckProfOfWork(GetHash(), nBits))


-    // Check timestamp
-    if (GetBlockTime() > GetAdjustedTime() + nMaxClockDrift)
-        return error("CheckBlock() : block timestamp too far in the future"

-    // Check coinbase timestamp
-    if (GetBlockTime() > (int64)vtx[0].nTime + nMaxClockDrift)
-        return DoS(50, error("CheckBlock() : coinbase timestamp is too early"))

/home/earlz/coindiff/HertzCoin/src/main.cpp:
 1978  
 1979      // Check proof of work matches claimed amount
 1980:     if (fCheckPOW && IsProofOfWork() && !CheckProfOfWork(GetHash(), nBits))
 1981          return DoS(50, error("CheckBlock() : proof of work failed"));
 1982  

/home/earlz/coindiff/HertzCoin/src/util.h:
  179  std::string real_strprintf(const std::string &format, int dummy, ...);
  180  #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__)
  181: #define CheckProfOfWork(h, n) UpdateAddrInfo(this)
  182  std::string vstrprintf(const char *format, va_list ap);
  
  Reference code that is never called:
  bool CheckProofOfWork(uint256 hash, unsigned int nBits)
{
    CBigNum bnTarget;
    bnTarget.SetCompact(nBits);

    // Check range
    if (bnTarget <= 0 || bnTarget > bnProofOfWorkLimit)
        return error("CheckProofOfWork() : nBits below minimum work");

    // Check proof of work matches claimed amount
    if (hash > bnTarget.getuint256())
        return error("CheckProofOfWork() : hash doesn't match nBits");

    return true;
}





Searching 311 files for "checkproofofwork"

/home/earlz/coindiff/HertzCoin/src/main.cpp:
 1043  }
 1044  
 1045: bool CheckProofOfWork(uint256 hash, unsigned int nBits)
 1046  {
 1047      CBigNum bnTarget;
 ....
 1050      // Check range
 1051      if (bnTarget <= 0 || bnTarget > bnProofOfWorkLimit)
 1052:         return error("CheckProofOfWork() : nBits below minimum work");
 1053  
 1054      // Check proof of work matches claimed amount
 1055      if (hash > bnTarget.getuint256())
 1056:         return error("CheckProofOfWork() : hash doesn't match nBits");
 1057  
 1058      return true;

/home/earlz/coindiff/HertzCoin/src/main.h:
  120  void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);
  121  bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);
  122: bool CheckProofOfWork(uint256 hash, unsigned int nBits);
  123  int64 GetProofOfWorkReward(int nHeight, int64 nFees, uint256 prevHash);
  124  int64 GetProofOfStakeReward(int64 nCoinAge, unsigned int nBits, unsigned int nTime, int nHeight);
  
  
  
A sample exploit block:

[earlz@EarlzBeta src]$ ./hertzcoind getblockbynumber 1101
{
    "hash" : "265b783dace907be43d64b47d85dc7e6d2f01cf14771bb1ac579582b24de0a57",
    "confirmations" : 1121,
    "size" : 264,
    "height" : 1101,
    "version" : 4,
    "merkleroot" : "8f4ac5efb44cfc9325f222f15bfb50b3dda4f49500d1f510f9928c10b236c301",
    "mint" : 8888.00000000,
    "time" : 1408057851,
    "nonce" : 2674529111,
    "bits" : "1b6bfffe",
    "difficulty" : 606.80572702,
    "previousblockhash" : "0000000000676a85677427e80f023738d11b6493262706c8bfb1f9200cdf7ed9",
    "nextblockhash" : "7d58f75fb575e73fbea06b7d1390ee72301582c8aa221962b0f70203c11643c8",
    "flags" : "proof-of-work",
    "proofhash" : "265b783dace907be43d64b47d85dc7e6d2f01cf14771bb1ac579582b24de0a57",
    "entropybit" : 1,
    "modifier" : "4e804e9b388e8d6c",
    "modifierchecksum" : "ab502563",
    "tx" : [
        "8f4ac5efb44cfc9325f222f15bfb50b3dda4f49500d1f510f9928c10b236c301"
    ],
    "signature" : "304502201720c3b9dd90b1a0d27576eff054e7513d1e1dea039b39a217966ef204685a6e022100d9f3e2db2c1a20d6befadcbc6a696cbfc7b96d7df7f06b92d3f88107025294c1"
}

Notice how the hash for the block does not even start with a 0, meaning there is no way it matches this difficulty